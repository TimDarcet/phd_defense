# type: ignore
from manim_slides.slide import Slide, ThreeDSlide
from manimlib import (
    ABC,
    ALL_MODIFIERS,
    ARROW_SYMBOLS,
    ASPECT_RATIO,
    BLACK,
    BLUE,
    BLUE_A,
    BLUE_B,
    BLUE_C,
    BLUE_D,
    BLUE_E,
    BOLD,
    BOTTOM,
    CACHE_SIZE,
    CLOSED_THRESHOLD,
    COLOR_KEY,
    COLORMAP_3B1B,
    CURSOR_KEY,
    DARK_BROWN,
    DEFAULT_ANIMATION_LAG_RATIO,
    DEFAULT_ANIMATION_RUN_TIME,
    DEFAULT_ARROW_TIP_LENGTH,
    DEFAULT_ARROW_TIP_WIDTH,
    DEFAULT_BUFF_RATIO,
    DEFAULT_CANVAS_HEIGHT,
    DEFAULT_CANVAS_WIDTH,
    DEFAULT_DASH_LENGTH,
    DEFAULT_DOT_RADIUS,
    DEFAULT_FILL_COLOR,
    DEFAULT_GLOW_DOT_RADIUS,
    DEFAULT_GRID_HEIGHT,
    DEFAULT_LAGGED_START_LAG_RATIO,
    DEFAULT_LINE_SPACING_SCALE,
    DEFAULT_MOBJECT_TO_EDGE_BUFF,
    DEFAULT_MOBJECT_TO_MOBJECT_BUFF,
    DEFAULT_PIXEL_HEIGHT,
    DEFAULT_PIXEL_WIDTH,
    DEFAULT_RESOLUTION,
    DEFAULT_SMALL_DOT_RADIUS,
    DEFAULT_STROKE_COLOR,
    DEFAULT_STROKE_WIDTH,
    DEFAULT_X_RANGE,
    DEFAULT_Y_RANGE,
    DEG,
    DEGREES,
    DL,
    DOWN,
    DR,
    EPSILON,
    ET,
    EVENT_DISPATCHER,
    FRAME_HEIGHT,
    FRAME_SHAPE,
    FRAME_WIDTH,
    FRAME_X_RADIUS,
    FRAME_Y_RADIUS,
    GOLD,
    GOLD_A,
    GOLD_B,
    GOLD_C,
    GOLD_D,
    GOLD_E,
    GRAB_KEY,
    GRAB_KEYS,
    GREEN,
    GREEN_A,
    GREEN_B,
    GREEN_C,
    GREEN_D,
    GREEN_E,
    GREEN_SCREEN,
    GREY,
    GREY_A,
    GREY_B,
    GREY_BROWN,
    GREY_C,
    GREY_D,
    GREY_E,
    IN,
    INFORMATION_KEY,
    ITALIC,
    LARGE_BUFF,
    LEFT,
    LEFT_SIDE,
    LIGHT_BROWN,
    LIGHT_PINK,
    MANIM_COLORS,
    MAROON,
    MAROON_A,
    MAROON_B,
    MAROON_C,
    MAROON_D,
    MAROON_E,
    MED_LARGE_BUFF,
    MED_SMALL_BUFF,
    NORMAL,
    NULL_POINTS,
    OBLIQUE,
    ORANGE,
    ORIGIN,
    OUT,
    PATH_TO_POINTS,
    PI,
    PINK,
    PROGRAM_UNIFORM_MIRRORS,
    PURPLE,
    PURPLE_A,
    PURPLE_B,
    PURPLE_C,
    PURPLE_D,
    PURPLE_E,
    RADIANS,
    RED,
    RED_A,
    RED_B,
    RED_C,
    RED_D,
    RED_E,
    RESIZE_KEY,
    RIGHT,
    RIGHT_SIDE,
    SCALE_FACTOR_PER_FONT_POINT,
    SELECT_KEY,
    SMALL_BUFF,
    STRAIGHT_PATH_THRESHOLD,
    SVG_HASH_TO_MOB_MAP,
    TAU,
    TEAL,
    TEAL_A,
    TEAL_B,
    TEAL_C,
    TEAL_D,
    TEAL_E,
    TEX_TO_SYMBOL_COUNT,
    TEXT_MOB_SCALE_FACTOR,
    TOP,
    TYPE_CHECKING,
    UL,
    UNSELECT_KEY,
    UP,
    UR,
    WHITE,
    X_AXIS,
    X_GRAB_KEY,
    Y_AXIS,
    Y_GRAB_KEY,
    YELLOW,
    YELLOW_A,
    YELLOW_B,
    YELLOW_C,
    YELLOW_D,
    YELLOW_E,
    Z_AXIS,
    AddTextWordByWord,
    AnimatedBoundary,
    AnimatedStreamLines,
    Animation,
    AnimationGroup,
    AnimationOnSurroundingRectangle,
    AnimationType,
    AnnularSector,
    Annulus,
    ApplyComplexFunction,
    ApplyFunction,
    ApplyMatrix,
    ApplyMethod,
    ApplyPointwiseFunction,
    ApplyPointwiseFunctionToCenter,
    ApplyWave,
    Arc,
    ArcBetweenPoints,
    Arrow,
    ArrowTip,
    Axes,
    BackgroundRectangle,
    BarChart,
    Brace,
    BraceLabel,
    BraceText,
    Broadcast,
    Bubble,
    BulletedList,
    Button,
    Cache,
    Camera,
    CameraFrame,
    ChangeDecimalToValue,
    ChangingDecimal,
    Checkbox,
    Checkmark,
    CheckpointManager,
    Circle,
    CircleIndicate,
    Clock,
    ClockPassesTime,
    Code,
    Color,
    ColorSliders,
    ComplexHomotopy,
    ComplexPlane,
    ComplexValueTracker,
    Cone,
    ControlMobject,
    ControlPanel,
    CoordinateSystem,
    CountInFrom,
    Cross,
    Cube,
    CubicBezier,
    CurvedArrow,
    CurvedDoubleArrow,
    CurvesAsSubmobjects,
    CyclicReplace,
    Cylinder,
    Dartboard,
    DashedLine,
    DashedVMobject,
    DecimalMatrix,
    DecimalNumber,
    DieFace,
    Difference,
    Disk3D,
    Dodecahedron,
    Dot,
    DotCloud,
    DoubleSpeechBubble,
    DrawBorderThenFill,
    Elbow,
    Ellipse,
    EnableDisableButton,
    EndScene,
    EventListener,
    EventType,
    Exclusion,
    ExitStack,
    Exmark,
    ExponentialValueTracker,
    Fade,
    FadeIn,
    FadeInFromPoint,
    FadeOut,
    FadeOutToPoint,
    FadeToColor,
    FadeTransform,
    FadeTransformPieces,
    Flash,
    FlashAround,
    FlashUnder,
    FlashyFadeIn,
    FocusOn,
    FullScreenFadeRectangle,
    FullScreenRectangle,
    FunctionGraph,
    Generic,
    GlowDot,
    GlowDots,
    Group,
    GrowArrow,
    GrowFromCenter,
    GrowFromEdge,
    GrowFromPoint,
    Homotopy,
    Image,
    ImageMobject,
    ImplicitFunction,
    Indicate,
    Integer,
    IntegerMatrix,
    InteractiveScene,
    InteractiveSceneEmbed,
    Intersection,
    Iterable,
    LaggedStart,
    LaggedStartMap,
    Laptop,
    LatexError,
    Lightbulb,
    Line,
    Line3D,
    LinearNumberSlider,
    MaintainPositionRelativeTo,
    MarkupText,
    Matrix,
    Mobject,
    MobjectMatrix,
    MotionMobject,
    MoveAlongPath,
    MoveToTarget,
    NumberLine,
    NumberPlane,
    OldSpeechBubble,
    OldThoughtBubble,
    OrderedDict,
    ParametricCurve,
    ParametricSurface,
    Path,
    PGroup,
    PhaseFlow,
    Piano,
    Piano3D,
    PMobject,
    Point,
    Polygon,
    Polyline,
    Prism,
    Prismify,
    ProgressDisplay,
    PygletWindow,
    PygletWindowKeys,
    R3_to_complex,
    Rectangle,
    RegularPolygon,
    ReplacementTransform,
    Restore,
    Rotate,
    Rotating,
    Rotation,
    RoundedRectangle,
    SampleSpace,
    ScaleInPlace,
    Scene,
    SceneFileWriter,
    SceneState,
    ScreenRectangle,
    Sector,
    SequenceMatcher,
    SGroup,
    ShaderWrapper,
    ShowCreation,
    ShowCreationThenDestruction,
    ShowCreationThenDestructionAround,
    ShowCreationThenFadeAround,
    ShowCreationThenFadeOut,
    ShowIncreasingSubsets,
    ShowPartial,
    ShowPassingFlash,
    ShowPassingFlashAround,
    ShowSubmobjectsOneByOne,
    ShrinkToCenter,
    SmallDot,
    SmoothedVectorizedHomotopy,
    SpeechBubble,
    Speedometer,
    Sphere,
    Square,
    Square3D,
    StreamLines,
    StringMobject,
    StrokeArrow,
    SubmobjectType,
    SubVmobjectType,
    Succession,
    Surface,
    SurfaceMesh,
    SurroundingRectangle,
    SVGMobject,
    Swap,
    TangentLine,
    Tex,
    TexMatrix,
    Text,
    Textbox,
    TexText,
    TexTextFromPresetString,
    TexturedSurface,
    ThoughtBubble,
    ThreeDAxes,
    ThreeDCamera,
    ThreeDScene,
    Timer,
    TimeVaryingVectorField,
    TipableVMobject,
    Title,
    Torus,
    TracedPath,
    TracingTail,
    Transform,
    TransformFromCopy,
    TransformMatchingParts,
    TransformMatchingShapes,
    TransformMatchingStrings,
    TransformMatchingTex,
    Triangle,
    TrueDot,
    TurnInsideOut,
    TypeVar,
    Uncreate,
    Underline,
    Union,
    UnitInterval,
    UpdateFromAlphaFunc,
    UpdateFromFunc,
    ValueTracker,
    VCube,
    Vector,
    VectorField,
    VectorizedEarth,
    VectorizedPoint,
    VFadeIn,
    VFadeInThenOut,
    VFadeOut,
    VGroup,
    VGroup3D,
    VHighlight,
    VideoIcon,
    VideoSeries,
    VMobject,
    VMobjectFromSVGPath,
    VPrism,
    VShaderWrapper,
    VShowPassingFlash,
    WiggleOutThenIn,
    Window,
    Write,
    abstractmethod,
    adjacent_n_tuples,
    adjacent_pairs,
    always,
    always_redraw,
    always_rotate,
    always_shift,
    angle_axis_from_quaternion,
    angle_between_vectors,
    angle_of_vector,
    animation,
    annotations,
    appdirs,
    approx_smooth_quadratic_bezier_handles,
    arr_clip,
    array_is_constant,
    arrays_match,
    assert_is_mobject_method,
    average_color,
    batch_by_property,
    bezier,
    binary_search,
    cache_on_disk,
    camera,
    cartesian_product,
    cdist,
    center_of_mass,
    char_to_cahced_mob,
    choose,
    clear_cache,
    clip,
    clockwise_path,
    color_gradient,
    color_to_hex,
    color_to_int_rgb,
    color_to_int_rgba,
    color_to_rgb,
    color_to_rgba,
    compass_directions,
    complex_func_to_R3_func,
    complex_to_R3,
    config,
    constants,
    contextmanager,
    copy,
    counterclockwise_path,
    cross,
    cross2d,
    curve_to_quadratic,
    cycle_animation,
    deepcopy,
    diag_to_matrix,
    double_smooth,
    earclip_triangulation,
    earcut,
    event_handler,
    exponential_decay,
    extract_mobject_family_members,
    f_always,
    fdiv,
    find_file,
    find_intersection,
    full_range_specifier,
    gen_choose,
    get_cache_dir,
    get_closest_point_on_line,
    get_color_map,
    get_colormap_code,
    get_colormap_from_colors,
    get_colormap_list,
    get_directories,
    get_downloads_dir,
    get_full_raster_image_path,
    get_full_sound_file_path,
    get_full_vector_image_path,
    get_ipython,
    get_manim_dir,
    get_norm,
    get_num_args,
    get_output_dir,
    get_parameters,
    get_quadratic_approximation_of_cubic,
    get_raster_image_dir,
    get_rgb_gradient_function,
    get_sample_coords,
    get_shader_code_from_file,
    get_shader_dir,
    get_shader_program,
    get_smooth_cubic_bezier_handle_points,
    get_smooth_quadratic_bezier_path_through,
    get_sound_dir,
    get_temp_dir,
    get_unit_normal,
    get_vector_image_dir,
    get_vectorized_rgb_gradient_function,
    get_winding_number,
    gl,
    guarantee_existence,
    hash_obj,
    hash_string,
    hashlib,
    hex2rgb,
    hex_to_int,
    hex_to_rgb,
    image_path_to_texture,
    index_labels,
    inspect,
    int_to_hex,
    integer_interpolate,
    interpolate,
    interpolate_color,
    interpolate_color_by_hsl,
    inverse_interpolate,
    invert_color,
    invert_image,
    io,
    is_closed,
    is_inside_triangle,
    it,
    latex_to_svg,
    linalg,
    line_intersection,
    line_intersects_path,
    linear,
    linear_sum_assignment,
    lingering,
    list_difference_update,
    list_update,
    listify,
    log,
    logger,
    lru_cache,
    make_even,
    manim_config,
    manimpango,
    markup_to_svg,
    match_interpolate,
    math,
    merge_dicts_recursively,
    mglw,
    mid,
    midpoint,
    mobject,
    moderngl,
    module_loader,
    move_along_vector_field,
    move_points_along_vector_field,
    move_submobjects_along_vector_field,
    norm_squared,
    normalize,
    normalize_along_axis,
    not_quite_there,
    np,
    num_tex_symbols,
    numbers,
    ode_solution_points,
    op,
    os,
    outer_interpolate,
    override_animate,
    overshoot,
    partial_bezier_points,
    partial_quadratic_bezier_points,
    path_along_arc,
    pathops,
    pickle,
    pkg_resources,
    platform,
    plot_isoline,
    poly_line_length,
    prepare_animation,
    print_family,
    project_along_vector,
    pygments,
    pyperclip,
    pyplot,
    quadratic_bezier_points_for_arc,
    quaternion_conjugate,
    quaternion_from_angle_axis,
    quaternion_mult,
    random,
    random_bright_color,
    random_color,
    re,
    recursive_mobject_remove,
    reduce,
    register_font,
    remove_list_redundancies,
    remove_tex_environments,
    resize_array,
    resize_preserving_order,
    resize_with_interpolation,
    rgb2hex,
    rgb_to_color,
    rgb_to_hex,
    rgba_to_color,
    rotate_vector,
    rotate_vector_2d,
    rotation_about_z,
    rotation_between_vectors,
    rotation_matrix,
    rotation_matrix_from_quaternion,
    rotation_matrix_transpose,
    rotation_matrix_transpose_from_quaternion,
    running_start,
    rush_from,
    rush_into,
    scene,
    screeninfo,
    se,
    set_array_by_interpolation,
    set_program_uniform,
    shader_wrapper,
    shuffled,
    sigmoid,
    slow_into,
    smooth,
    smooth_quadratic_path,
    solve_ivp,
    square_to_cube_faces,
    squish_rate_func,
    straight_path,
    sys,
    tempfile,
    there_and_back,
    there_and_back_with_pause,
    thick_diagonal,
    time,
    tri_area,
    turn_animation_into_updater,
    utils,
    validators,
    vectorize,
    wiggle,
    window,
    wraps,
    z_to_vector,
)

title_text_kws = {
    "font_size": 48,
    "fill_color": "#333333",  # Dark grey color
}
body_text_kws = {
    "font_size": 24,
    "fill_color": "#333333",  # Dark grey color
}
sub_text_kws = {
    "font_size": 16,
    "fill_color": "#888888",  # Dark grey color
}


class MainSlide(Slide):
    def construct(self):
        # Set background color to beige
        self.camera.background_rgba = [*list(Color("#F5F1DC").rgb), 1.0]
        ## eg slide
        self.play(*(FadeOut(mob) for mob in self.mobjects))
        # blabla
        self.next_slide()

        ## Title
        self.play(
            Write(Text("Self-supervised learning\nof dense visual representations", **title_text_kws).shift(3 * UP))  # type: ignore
        )
        self.play(Write(Text("PhD Thesis Defense", **body_text_kws).shift(DOWN * 2)))
        self.play(Write(Text("Timothée Darcet", **body_text_kws).shift(DOWN * 0.5)))
        self.next_slide()
        ## About me
        self.play(*(FadeOut(mob) for mob in self.mobjects))
        self.play(Write(Text("About me", **title_text_kws).shift(3 * UP)))
        self.play(
            Write(
                Text(
                    "I am a PhD student at Inria (Grenoble) and Meta\n"
                    + "Advised by Maxime Oquab, Piotr Bojanowski and Julien Mairal (+ formerly Armand Joulin)\n"
                    + "Previously: master's at ENS Paris-Saclay (MVA) and master's at Ecole polytechnique\n"
                    + "I worked on: self-supervised learning, vision transformers",
                    **body_text_kws,
                ).shift(DOWN * 0.5)
            )
        )
        self.next_slide()
        ## Papers
        self.play(*(FadeOut(mob) for mob in self.mobjects))
        self.play(Write(Text("Papers", **title_text_kws).shift(3 * UP)))
        # Main papers
        main_papers_text = VGroup(
            Text("DINOv2: Learning Robust Visual Features without Supervision", **body_text_kws),
            Text(
                "Oquab*, Darcet*, Moutakanni*, et al, TMLR 2024 (featured cert. & outstanding cert. finalist)",
                **sub_text_kws,
            ),
            Text("Vision transformers need registers", **body_text_kws),
            Text("Darcet et al, ICLR 2024 (oral & outstanding paper award)", **sub_text_kws),
            Text("Cluster and Predict Latent Patches for Improved Masked Image Modeling", **body_text_kws),
            Text("Darcet et al, TMLR 2025", **sub_text_kws),
        )
        for i, (m1, m2) in enumerate(zip(main_papers_text.submobjects, main_papers_text.submobjects[1:], strict=False)):
            m2.next_to(m1, DOWN, aligned_edge=LEFT, buff=0.1 + 0.1 * (i % 2))
        main_papers_text.center().shift(UP)

        # Secondary papers
        # Secondary papers
        secondary_papers_text = VGroup(
            Text("Automatic Data Curation for Self-Supervised Learning: A Clustering-Based Approach", **body_text_kws),
            Text("Vo et al, TMLR 2024", **sub_text_kws),
            Text(
                "DINOv2 Meets Text: A Unified Framework for Image-and Pixel-Level Vision-Language Alignment",
                **body_text_kws,
            ),
            Text("Jose et al, CVPR 2025", **sub_text_kws),
        )

        for i, (m1, m2) in enumerate(
            zip(secondary_papers_text.submobjects, secondary_papers_text.submobjects[1:], strict=False)
        ):
            m2.next_to(m1, DOWN, aligned_edge=LEFT, buff=0.1 + 0.1 * (i % 2))
        secondary_papers_text.next_to(main_papers_text, DOWN, aligned_edge=LEFT, buff=1)

        all_text = VGroup(main_papers_text, secondary_papers_text)
        all_text.center()

        main_papers_box = (
            Rectangle(
                width=max(main_papers_text.get_width(), secondary_papers_text.get_width()) + 0.5,
                # width=main_papers_text.get_width() + 0.5,
                height=main_papers_text.get_height() + 0.5,
                color="#333333",
            )
            .move_to(main_papers_text, aligned_edge=LEFT)
            .shift(LEFT * 0.25)
            .flip()
        )
        secondary_papers_box = (
            Rectangle(
                width=main_papers_box.get_width(),
                # width=secondary_papers_text.get_width() + 0.5,
                height=secondary_papers_text.get_height() + 0.5,
                color="#333333",
            )
            .move_to(secondary_papers_text)
            .flip()
        )

        self.play(Write(main_papers_text))
        self.play(ShowCreation(main_papers_box))
        self.play(Write(secondary_papers_text))
        self.play(ShowCreation(secondary_papers_box), lag_ratio=0.5)
        self.next_slide()
        ## Focus presented papers
        reg_title = Text("Registers", **body_text_kws).move_to(main_papers_text[2], aligned_edge=LEFT)
        capi_title = Text("CAPI", **body_text_kws).move_to(main_papers_text[4], aligned_edge=LEFT)

        self.play(*(FadeOut(mob) for mob in main_papers_text[:2] + secondary_papers_text))
        # self.play(*(FadeOut(mob) for mob in main_papers_text[3::2]))
        # self.play(FadeOut(secondary_papers_box), FadeOut(main_papers_box))
        self.play(Transform(main_papers_text[2], reg_title), Transform(main_papers_text[4], capi_title))
        self.next_slide()
